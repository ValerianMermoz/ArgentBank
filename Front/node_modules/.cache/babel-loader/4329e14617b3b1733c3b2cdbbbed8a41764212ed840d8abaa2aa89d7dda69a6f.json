{"ast":null,"code":"export const login = (email, password) => async dispatch => {\n  try {\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        email,\n        password\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      const {\n        token\n      } = data.body;\n      dispatch({\n        type: \"LOGIN\",\n        payload: {\n          token\n        }\n      });\n    } else {\n      console.error(\"Erreur de la connexion. Statut de réponse:\", response.status);\n    }\n  } catch (error) {\n    console.error(\"Erreur interne\", error);\n  }\n};\nexport const logout = () => ({\n  type: \"LOGOUT\"\n});\nexport const userName = newUserName => async (dispatch, getState) => {\n  try {\n    const {\n      token\n    } = getState();\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\n      method: \"PUT\",\n      body: JSON.stringify({\n        userName: newUserName\n      }),\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${token.token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (response.ok) {\n      dispatch({\n        type: \"USER_NAME\",\n        payload: newUserName\n      });\n    } else {\n      console.error(\"Erreur de mise à jour du nom d'utilisateur. Statut de réponse:\", response.status);\n    }\n  } catch (error) {\n    console.error(\"Erreur lors de la mise à jour du nom d'utilisateur:\", error);\n  }\n};\nexport const getProfile = () => async (dispatch, getState) => {\n  try {\n    const {\n      token\n    } = getState();\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\n      method: \"POST\",\n      headers: {\n        accept: \"application/json\",\n        Authorization: `Bearer ${token.token}`\n      }\n    });\n    if (response.ok) {\n      const data = await response.json();\n      const userProfile = data.body;\n      dispatch({\n        type: \"USER\",\n        payload: {\n          email: userProfile.email,\n          firstName: userProfile.firstName,\n          id: userProfile.id,\n          lastName: userProfile.lastName,\n          userName: userProfile.userName\n        }\n      });\n    } else {\n      console.error(\"Erreur lors de la requête. Statut de réponse:\", response.status);\n    }\n  } catch (error) {\n    console.error(\"Erreur interne\", error);\n  }\n};","map":{"version":3,"names":["login","email","password","dispatch","response","fetch","method","body","JSON","stringify","headers","ok","data","json","token","type","payload","console","error","status","logout","userName","newUserName","getState","accept","Authorization","getProfile","userProfile","firstName","id","lastName"],"sources":["C:/Users/valer/GitHub/ArgentBank-website-main/Front/src/redux/apiCall.js"],"sourcesContent":["export const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/login\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ email, password }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      const { token } = data.body;\r\n\r\n      dispatch({\r\n        type: \"LOGIN\",\r\n        payload: { token },\r\n      });\r\n    } else {\r\n      console.error(\r\n        \"Erreur de la connexion. Statut de réponse:\",\r\n        response.status\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erreur interne\", error);\r\n  }\r\n};\r\n\r\nexport const logout = () => ({ type: \"LOGOUT\" });\r\n\r\nexport const userName = (newUserName) => async (dispatch, getState) => {\r\n  try {\r\n    const { token } = getState();\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"PUT\",\r\n      body: JSON.stringify({ userName: newUserName }),\r\n      headers: {\r\n        accept: \"application/json\",\r\n        Authorization: `Bearer ${token.token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      dispatch({\r\n        type: \"USER_NAME\",\r\n        payload: newUserName,\r\n      });\r\n    } else {\r\n      console.error(\r\n        \"Erreur de mise à jour du nom d'utilisateur. Statut de réponse:\",\r\n        response.status\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de la mise à jour du nom d'utilisateur:\", error);\r\n  }\r\n};\r\n\r\nexport const getProfile = () => async (dispatch, getState) => {\r\n  try {\r\n    const { token } = getState();\r\n    const response = await fetch(\"http://localhost:3001/api/v1/user/profile\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        accept: \"application/json\",\r\n        Authorization: `Bearer ${token.token}`,\r\n      },\r\n    });\r\n\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      const userProfile = data.body;\r\n      dispatch({\r\n        type: \"USER\",\r\n        payload: {\r\n          email: userProfile.email,\r\n          firstName: userProfile.firstName,\r\n          id: userProfile.id,\r\n          lastName: userProfile.lastName,\r\n          userName: userProfile.userName,\r\n        },\r\n      });\r\n    } else {\r\n      console.error(\r\n        \"Erreur lors de la requête. Statut de réponse:\",\r\n        response.status\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Erreur interne\", error);\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC5D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;MACtEC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC,CAAC;MACzCQ,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IAEF,IAAIN,QAAQ,CAACO,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,MAAM;QAAEC;MAAM,CAAC,GAAGF,IAAI,CAACL,IAAI;MAE3BJ,QAAQ,CAAC;QACPY,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE;UAAEF;QAAM;MACnB,CAAC,CAAC;IACJ,CAAC,MAAM;MACLG,OAAO,CAACC,KAAK,CACX,4CAA4C,EAC5Cd,QAAQ,CAACe,MACX,CAAC;IACH;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACxC;AACF,CAAC;AAED,OAAO,MAAME,MAAM,GAAGA,CAAA,MAAO;EAAEL,IAAI,EAAE;AAAS,CAAC,CAAC;AAEhD,OAAO,MAAMM,QAAQ,GAAIC,WAAW,IAAK,OAAOnB,QAAQ,EAAEoB,QAAQ,KAAK;EACrE,IAAI;IACF,MAAM;MAAET;IAAM,CAAC,GAAGS,QAAQ,CAAC,CAAC;IAC5B,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;MACxEC,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEY,QAAQ,EAAEC;MAAY,CAAC,CAAC;MAC/CZ,OAAO,EAAE;QACPc,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAG,UAASX,KAAK,CAACA,KAAM,EAAC;QACtC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAIV,QAAQ,CAACO,EAAE,EAAE;MACfR,QAAQ,CAAC;QACPY,IAAI,EAAE,WAAW;QACjBC,OAAO,EAAEM;MACX,CAAC,CAAC;IACJ,CAAC,MAAM;MACLL,OAAO,CAACC,KAAK,CACX,gEAAgE,EAChEd,QAAQ,CAACe,MACX,CAAC;IACH;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;EAC7E;AACF,CAAC;AAED,OAAO,MAAMQ,UAAU,GAAGA,CAAA,KAAM,OAAOvB,QAAQ,EAAEoB,QAAQ,KAAK;EAC5D,IAAI;IACF,MAAM;MAAET;IAAM,CAAC,GAAGS,QAAQ,CAAC,CAAC;IAC5B,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;MACxEC,MAAM,EAAE,MAAM;MACdI,OAAO,EAAE;QACPc,MAAM,EAAE,kBAAkB;QAC1BC,aAAa,EAAG,UAASX,KAAK,CAACA,KAAM;MACvC;IACF,CAAC,CAAC;IAEF,IAAIV,QAAQ,CAACO,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,MAAMc,WAAW,GAAGf,IAAI,CAACL,IAAI;MAC7BJ,QAAQ,CAAC;QACPY,IAAI,EAAE,MAAM;QACZC,OAAO,EAAE;UACPf,KAAK,EAAE0B,WAAW,CAAC1B,KAAK;UACxB2B,SAAS,EAAED,WAAW,CAACC,SAAS;UAChCC,EAAE,EAAEF,WAAW,CAACE,EAAE;UAClBC,QAAQ,EAAEH,WAAW,CAACG,QAAQ;UAC9BT,QAAQ,EAAEM,WAAW,CAACN;QACxB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACLJ,OAAO,CAACC,KAAK,CACX,+CAA+C,EAC/Cd,QAAQ,CAACe,MACX,CAAC;IACH;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACxC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}