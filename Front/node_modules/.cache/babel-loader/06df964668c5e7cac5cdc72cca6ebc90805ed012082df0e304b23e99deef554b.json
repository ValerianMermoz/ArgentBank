{"ast":null,"code":"export const login = (email, password) => {\n  return async dispatch => {\n    try {\n      const response = await fetch('http://localhost:3001/api/v1/user/login', {\n        method: 'POST',\n        body: JSON.stringify({\n          email,\n          password\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(data);\n        const token = data.body.token;\n        dispatch({\n          type: 'LOGIN',\n          payload: {\n            token\n          }\n        });\n      } else {\n        console.log(\"Erreur de la connexion. Statut de réponse:\", response.status);\n      }\n    } catch (error) {\n      console.log(\"Erreur interne\");\n    }\n  };\n};\nexport const logout = () => {\n  return {\n    type: 'LOGOUT'\n  };\n};\nexport const userName = newUserName => {\n  return async (dispatch, getState) => {\n    try {\n      const token = getState().token;\n      const response = await fetch('http://localhost:3001/api/v1/user/profile', {\n        method: 'PUT',\n        body: JSON.stringify({\n          userName: newUserName\n        }),\n        headers: {\n          'accept': 'application/json',\n          'Authorization': 'Bearer ' + token.token,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        dispatch({\n          type: 'USER_NAME',\n          payload: newUserName\n        });\n      } else {\n        console.log(\"Erreur de mise à jour du nom d'utilisateur. Statut de réponse:\", response.status);\n      }\n    } catch (error) {\n      console.error(\"Erreur lors de la mise à jour du nom d'utilisateur:\", error);\n    }\n  };\n};\nexport const getProfile = () => {\n  return async (dispatch, getState) => {\n    try {\n      const token = getState().token;\n      const response = await fetch('http://localhost:3001/api/v1/user/profile', {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'Authorization': 'Bearer ' + token.token\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        const userProfile = data.body;\n        dispatch({\n          type: 'USER',\n          payload: {\n            userName: userProfile.userName\n          }\n        });\n      } else {\n        console.log(\"Erreur lors de la requete. Statut de réponse:\", response.status);\n      }\n    } catch (error) {\n      console.log(\"Erreur interne\");\n    }\n  };\n};","map":{"version":3,"names":["login","email","password","dispatch","response","fetch","method","body","JSON","stringify","headers","ok","data","json","console","log","token","type","payload","status","error","logout","userName","newUserName","getState","getProfile","userProfile"],"sources":["C:/Users/valer/GitHub/ArgentBank-website-main/Front/src/redux/apiCall.js"],"sourcesContent":["export const login = (email, password) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      const response = await fetch('http://localhost:3001/api/v1/user/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({ email, password }),\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log(data)\r\n        const token = data.body.token;\r\n        \r\n        dispatch({\r\n          type: 'LOGIN',\r\n          payload: { token }\r\n        });\r\n      } else { console.log(\"Erreur de la connexion. Statut de réponse:\", response.status);\r\n      }\r\n    } catch (error) { console.log(\"Erreur interne\");\r\n    }\r\n  };\r\n};\r\n\r\nexport const logout = () => {\r\n  return { type: 'LOGOUT' };\r\n};\r\n\r\nexport const userName = (newUserName) => {\r\n  return async (dispatch, getState) => {\r\n      try {\r\n          const token = getState().token;\r\n          const response = await fetch('http://localhost:3001/api/v1/user/profile', {\r\n              method: 'PUT',\r\n              body: JSON.stringify({ userName: newUserName }),\r\n              headers: {\r\n                  'accept': 'application/json',\r\n                  'Authorization': 'Bearer ' + token.token,\r\n                  'Content-Type': 'application/json'\r\n              }\r\n          });\r\n\r\n          if (response.ok) {\r\n              dispatch({\r\n                  type: 'USER_NAME',\r\n                  payload: newUserName\r\n              });\r\n          } else {\r\n              console.log(\"Erreur de mise à jour du nom d'utilisateur. Statut de réponse:\", response.status);\r\n          }\r\n      } catch (error) {\r\n          console.error(\"Erreur lors de la mise à jour du nom d'utilisateur:\", error);\r\n      }\r\n  };\r\n}\r\n\r\nexport const getProfile = () => {\r\n  return async (dispatch, getState) => { \r\n      try {\r\n          const token = getState().token;\r\n          const response = await fetch('http://localhost:3001/api/v1/user/profile', {\r\n              method: 'POST',\r\n              headers: {\r\n                  'accept': 'application/json',\r\n                  'Authorization': 'Bearer ' + token.token,\r\n              }\r\n          });\r\n\r\n          if (response.ok) {\r\n              const data = await response.json();\r\n              const userProfile = data.body;\r\n              dispatch({\r\n                  type: 'USER',\r\n                  payload: {\r\n                      userName: userProfile.userName,\r\n                  },\r\n              });\r\n          } else { console.log(\"Erreur lors de la requete. Statut de réponse:\", response.status);\r\n          }\r\n      } catch (error) { console.log(\"Erreur interne\");\r\n      }\r\n  };\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}